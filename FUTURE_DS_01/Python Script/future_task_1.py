# -*- coding: utf-8 -*-
"""FUTURE-TASK-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uMVE0HpuWqRpyu8r2SJRHKUtIyoFJqRf
"""

# ðŸ”¹ Import Required Libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from textblob import TextBlob
from wordcloud import WordCloud
from collections import Counter
import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

df = pd.read_csv('/content/sentimentdataset.csv')

# Initial Data Check
print("Sample data:")
print(df.head())

# Preprocess Text Column

text_column_name = 'Text'
if text_column_name not in df.columns:
    raise KeyError(f"Column '{text_column_name}' not found in the DataFrame. Please check your dataset or update 'text_column_name'.")

df[text_column_name] = df[text_column_name].astype(str)
df['text_clean'] = df[text_column_name].str.lower().str.replace(r'[^\w\s]', '', regex=True)

# Sentiment Analysis using TextBlob
def analyze_sentiment(text):
    return TextBlob(text).sentiment.polarity

df['sentiment_score'] = df['text_clean'].apply(analyze_sentiment)
df['sentiment'] = df['sentiment_score'].apply(lambda x: 'Positive' if x > 0 else ('Negative' if x < 0 else 'Neutral'))

# Extract Trending Keywords
all_words = ' '.join(df['text_clean'])
word_freq = Counter(all_words.split())
common_words_df = pd.DataFrame(word_freq.most_common(20), columns=['Word', 'Frequency'])

# Visualizations
# Sentiment Distribution Plot
plt.figure(figsize=(8, 4))
sns.countplot(data=df, x='sentiment', palette='Set2')
plt.title('Sentiment Distribution of Trending Topics')
plt.show()

# Word Cloud of Trending Topics
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_words)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Trending Keywords WordCloud')
plt.show()

#  Export for Dashboarding
df[[text_column_name, 'sentiment_score', 'sentiment']].to_csv('sentiment_analysis_output.csv', index=False)
common_words_df.to_csv('trending_keywords.csv', index=False)